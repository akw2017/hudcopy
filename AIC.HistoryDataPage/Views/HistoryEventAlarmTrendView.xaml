<Controls:MetroWindow  x:Class="AIC.HistoryDataPage.Views.HistoryEventAlarmTrendView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
             xmlns:local="clr-namespace:AIC.HistoryDataPage.Views"        
             xmlns:coreType="clr-namespace:AIC.CoreType;assembly=AIC.CoreType"
             xmlns:core="clr-namespace:AIC.Core;assembly=AIC.Core"
             xmlns:prism="http://prismlibrary.com/"    
             prism:ViewModelLocator.AutoWireViewModel="True"
             mc:Ignorable="d" 
             Height="260" Width="900" Title="报警点趋势" WindowStartupLocation="CenterScreen" Topmost="True" Icon="/AIC.Resources;component/Images/set.png" >
    <Control.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/AIC.HistoryDataPage;component/Themes/HistoryDataDiagramTemplate.xaml"/>
                <ResourceDictionary Source="/AIC.Resources;component/Themes/ColorStyle.xaml" />
                <ResourceDictionary Source="/AIC.Resources;component/Themes/ScrollBar.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <Style TargetType="{x:Type ListBoxItem}" x:Key="SignalMonitorStyle" >
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <!--<Setter Property="ContentTemplate" Value="{StaticResource ReplayTemplate}" />-->
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=DisplayMode}" Value="{x:Static coreType:SignalDisplayType.AMSTrend}">
                        <Setter Property="ContentTemplate" Value="{StaticResource ReplayTemplate}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=DisplayMode}" Value="{x:Static coreType:SignalDisplayType.TimeDomain}">
                        <Setter Property="ContentTemplate" Value="{StaticResource TimeDomainTemplate}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=DisplayMode}" Value="{x:Static coreType:SignalDisplayType.FrequencyDomain}">
                        <Setter Property="ContentTemplate" Value="{StaticResource FrequencyDomainTemplate}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=DisplayMode}" Value="{x:Static coreType:SignalDisplayType.PowerSpectrum}">
                        <Setter Property="ContentTemplate" Value="{StaticResource PowerSpectrumTemplate}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=DisplayMode}" Value="{x:Static coreType:SignalDisplayType.PowerSpectrumDensity}">
                        <Setter Property="ContentTemplate" Value="{StaticResource PowerSpectrumDensityTemplate}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=DisplayMode}" Value="{x:Static coreType:SignalDisplayType.Ortho}">
                        <Setter Property="ContentTemplate" Value="{StaticResource OrthoTemplate}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=DisplayMode}" Value="{x:Static coreType:SignalDisplayType.OffDesignCondition}">
                        <Setter Property="ContentTemplate" Value="{StaticResource OffDesignConditionTemplate}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=DisplayMode}" Value="{x:Static coreType:SignalDisplayType.OrderAnalysis}">
                        <Setter Property="ContentTemplate" Value="{StaticResource OrderAnalysisTemplate}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=DisplayMode}" Value="{x:Static coreType:SignalDisplayType.Time3DSpectrum}">
                        <Setter Property="ContentTemplate" Value="{StaticResource Time3DSpectrumTemplate}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=DisplayMode}" Value="{x:Static coreType:SignalDisplayType.RPM3D}">
                        <Setter Property="ContentTemplate" Value="{StaticResource RPM3DSpectrumTemplate}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=DisplayMode}" Value="{x:Static coreType:SignalDisplayType.AlarmPointTrend}">
                        <Setter Property="ContentTemplate" Value="{StaticResource AlarmPointTrendTemplate}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding IsVisible}" Value="false">
                        <Setter Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </ResourceDictionary>
    </Control.Resources>
    <Grid Background ="{DynamicResource AccentColorBrush3}">
        <Grid Margin="20" >
            <ListBox x:Name="listBox" Background="{x:Null}" BorderBrush="{x:Null}" 
                                         HorizontalAlignment="Stretch" VerticalAlignment="Stretch" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Auto"
                                         ItemsSource="{Binding HistoricalDatas}" ItemContainerStyle="{StaticResource SignalMonitorStyle}" >
                <ListBox.ItemsPanel>
                    <ItemsPanelTemplate>
                        <core:FluidWrapPanel x:Name="fluidWrapPanel" HorizontalAlignment="Left" VerticalAlignment="Top" ClipToBounds="False" ItemHeight="{Binding ItemHeight}" ItemWidth="{Binding ItemWidth}" IsComposing="{Binding IsComposing}" Orientation="Horizontal"  DragOpacity="1" DragScale="1">
                            <core:FluidWrapPanel.ElementEasing>
                                <BackEase EasingMode="EaseOut" Amplitude="0.35"></BackEase>
                            </core:FluidWrapPanel.ElementEasing>
                            <core:FluidWrapPanel.DragEasing>
                                <BackEase EasingMode="EaseOut" Amplitude="0.65"></BackEase>
                            </core:FluidWrapPanel.DragEasing>
                        </core:FluidWrapPanel>
                    </ItemsPanelTemplate>
                </ListBox.ItemsPanel>
            </ListBox>
        </Grid>
    </Grid>
</Controls:MetroWindow>
