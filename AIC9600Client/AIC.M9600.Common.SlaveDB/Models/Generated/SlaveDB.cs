



















// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `SlaveDB`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=localhost;User ID=sa;password=**zapped**;Initial Catalog=AIC9600SlaveSchema`
//     Schema:                 ``
//     Include Views:          `False`



using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace AIC.M9600.Common.SlaveDB.Generated
{

	public partial class SlaveORM : Database
	{
		public SlaveORM() 
			: base("SlaveDB")
		{
			CommonConstruct();
		}

		public SlaveORM(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			SlaveORM GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static SlaveORM GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new SlaveORM();
        }

		[ThreadStatic] static SlaveORM _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        

		public class Record<T> where T:new()
		{
			public static SlaveORM repo { get { return SlaveORM.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }

			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }

			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }

		}

	}
	



    

	[TableName("dbo.D_AnalogRransducerInSlot")]



	[PrimaryKey("id")]




	[ExplicitColumns]

    public partial class D_AnalogRransducerInSlot : SlaveORM.Record<D_AnalogRransducerInSlot>  
    {



		[Column] public long id { get; set; }





		[Column] public Guid T_Item_Guid { get; set; }





		[Column] public string ChannelHDID { get; set; }





		[Column] public DateTime ACQDatetime { get; set; }





		[Column] public int AlarmGrade { get; set; }





		[Column] public byte? ACQ_Unit_Type { get; set; }





		[Column] public byte? AsySyn { get; set; }





		[Column] public byte? MainCardCode { get; set; }





		[Column] public byte? SynWaveCode { get; set; }





		[Column] public bool? IsHdBypass { get; set; }





		[Column] public bool? IsHdMultiplication { get; set; }





		[Column] public Guid? RecordLab { get; set; }





		[Column] public Guid? SaveLab { get; set; }





		[Column] public Guid? ContinueLab { get; set; }





		[Column] public string ExtraInfoJSON { get; set; }





		[Column] public double? Result { get; set; }





		[Column] public bool? IsNotOK { get; set; }





		[Column] public bool? IsValidCH { get; set; }





		[Column] public string Unit { get; set; }





		[Column] public byte? InSignalCode { get; set; }





		[Column] public byte? EquationCode { get; set; }





		[Column] public bool? IsBypass { get; set; }





		[Column] public string Remarks { get; set; }





		[Column] public byte? SVTypeCode { get; set; }





		[Column] public string AlarmLimitJSON { get; set; }





		[Column] public DateTime? UploadDatetime { get; set; }



	}

    

	[TableName("dbo.D_AnalogRransducerOutSlot")]



	[PrimaryKey("id")]




	[ExplicitColumns]

    public partial class D_AnalogRransducerOutSlot : SlaveORM.Record<D_AnalogRransducerOutSlot>  
    {



		[Column] public long id { get; set; }





		[Column] public Guid T_Item_Guid { get; set; }





		[Column] public string ChannelHDID { get; set; }





		[Column] public DateTime ACQDatetime { get; set; }





		[Column] public int AlarmGrade { get; set; }





		[Column] public byte? ACQ_Unit_Type { get; set; }





		[Column] public byte? AsySyn { get; set; }





		[Column] public byte? MainCardCode { get; set; }





		[Column] public byte? SynWaveCode { get; set; }





		[Column] public bool? IsHdBypass { get; set; }





		[Column] public bool? IsHdMultiplication { get; set; }





		[Column] public Guid? RecordLab { get; set; }





		[Column] public Guid? SaveLab { get; set; }





		[Column] public Guid? ContinueLab { get; set; }





		[Column] public string ExtraInfoJSON { get; set; }





		[Column] public double? Result { get; set; }





		[Column] public bool? IsNotOK { get; set; }





		[Column] public bool? IsValidCH { get; set; }





		[Column] public string Unit { get; set; }





		[Column] public byte? InSignalCode { get; set; }





		[Column] public bool? IsBypass { get; set; }





		[Column] public string Remarks { get; set; }





		[Column] public byte? SVTypeCode { get; set; }





		[Column] public byte? EquationCode { get; set; }





		[Column] public string AlarmLimitJSON { get; set; }





		[Column] public DateTime? UploadDatetime { get; set; }



	}

    

	[TableName("dbo.D_DigitRransducerInSlot")]



	[PrimaryKey("id")]




	[ExplicitColumns]

    public partial class D_DigitRransducerInSlot : SlaveORM.Record<D_DigitRransducerInSlot>  
    {



		[Column] public long id { get; set; }





		[Column] public Guid T_Item_Guid { get; set; }





		[Column] public string ChannelHDID { get; set; }





		[Column] public DateTime ACQDatetime { get; set; }





		[Column] public int AlarmGrade { get; set; }





		[Column] public byte? ACQ_Unit_Type { get; set; }





		[Column] public byte? AsySyn { get; set; }





		[Column] public byte? MainCardCode { get; set; }





		[Column] public byte? SynWaveCode { get; set; }





		[Column] public bool? IsHdBypass { get; set; }





		[Column] public bool? IsHdMultiplication { get; set; }





		[Column] public Guid? RecordLab { get; set; }





		[Column] public Guid? SaveLab { get; set; }





		[Column] public Guid? ContinueLab { get; set; }





		[Column] public string ExtraInfoJSON { get; set; }





		[Column] public double? Result { get; set; }





		[Column] public bool? IsNotOK { get; set; }





		[Column] public bool? IsValidCH { get; set; }





		[Column] public string Unit { get; set; }





		[Column] public byte? InSignalCode { get; set; }





		[Column] public bool? IsBypass { get; set; }





		[Column] public string Remarks { get; set; }





		[Column] public byte? SVTypeCode { get; set; }





		[Column] public bool? EnableModBus485 { get; set; }





		[Column] public bool? EnableModBusTCPIP { get; set; }





		[Column] public byte? EquationCode { get; set; }





		[Column] public byte? ModBusFunCode { get; set; }





		[Column] public byte? SwitchCode { get; set; }





		[Column] public string AlarmLimitJSON { get; set; }





		[Column] public DateTime? UploadDatetime { get; set; }



	}

    

	[TableName("dbo.D_DigitRransducerOutSlot")]



	[PrimaryKey("id")]




	[ExplicitColumns]

    public partial class D_DigitRransducerOutSlot : SlaveORM.Record<D_DigitRransducerOutSlot>  
    {



		[Column] public long id { get; set; }





		[Column] public Guid T_Item_Guid { get; set; }





		[Column] public string ChannelHDID { get; set; }





		[Column] public DateTime ACQDatetime { get; set; }





		[Column] public int AlarmGrade { get; set; }





		[Column] public byte? ACQ_Unit_Type { get; set; }





		[Column] public byte? AsySyn { get; set; }





		[Column] public byte? MainCardCode { get; set; }





		[Column] public byte? SynWaveCode { get; set; }





		[Column] public bool? IsHdBypass { get; set; }





		[Column] public bool? IsHdMultiplication { get; set; }





		[Column] public Guid? RecordLab { get; set; }





		[Column] public Guid? SaveLab { get; set; }





		[Column] public Guid? ContinueLab { get; set; }





		[Column] public string ExtraInfoJSON { get; set; }





		[Column] public double? Result { get; set; }





		[Column] public bool? IsNotOK { get; set; }





		[Column] public bool? IsValidCH { get; set; }





		[Column] public string Unit { get; set; }





		[Column] public byte? InSignalCode { get; set; }





		[Column] public bool? IsBypass { get; set; }





		[Column] public string Remarks { get; set; }





		[Column] public byte? SVTypeCode { get; set; }





		[Column] public bool? EnableModBus485 { get; set; }





		[Column] public bool? EnableModBusTCPIP { get; set; }





		[Column] public byte? EquationCode { get; set; }





		[Column] public byte? ModBusFunCode { get; set; }





		[Column] public byte? SwitchCode { get; set; }





		[Column] public string AlarmLimitJSON { get; set; }





		[Column] public DateTime? UploadDatetime { get; set; }



	}

    

	[TableName("dbo.D_DigitTachometerSlot")]



	[PrimaryKey("id")]




	[ExplicitColumns]

    public partial class D_DigitTachometerSlot : SlaveORM.Record<D_DigitTachometerSlot>  
    {



		[Column] public long id { get; set; }





		[Column] public Guid T_Item_Guid { get; set; }





		[Column] public string ChannelHDID { get; set; }





		[Column] public DateTime ACQDatetime { get; set; }





		[Column] public int AlarmGrade { get; set; }





		[Column] public byte? ACQ_Unit_Type { get; set; }





		[Column] public byte? AsySyn { get; set; }





		[Column] public byte? MainCardCode { get; set; }





		[Column] public byte? SynWaveCode { get; set; }





		[Column] public bool? IsHdBypass { get; set; }





		[Column] public bool? IsHdMultiplication { get; set; }





		[Column] public Guid? RecordLab { get; set; }





		[Column] public Guid? SaveLab { get; set; }





		[Column] public Guid? ContinueLab { get; set; }





		[Column] public string ExtraInfoJSON { get; set; }





		[Column] public double? Result { get; set; }





		[Column] public bool? IsNotOK { get; set; }





		[Column] public bool? IsValidCH { get; set; }





		[Column] public bool? IsNotch { get; set; }





		[Column] public string Unit { get; set; }





		[Column] public byte? InSignalCode { get; set; }





		[Column] public bool? IsBypass { get; set; }





		[Column] public string Remarks { get; set; }





		[Column] public byte? SVTypeCode { get; set; }





		[Column] public int? AverageNumber { get; set; }





		[Column] public double? CalibrationCor { get; set; }





		[Column] public double? TeethNumber { get; set; }





		[Column] public string AlarmLimitJSON { get; set; }





		[Column] public DateTime? UploadDatetime { get; set; }



	}

    

	[TableName("dbo.D_EddyCurrentDisplacementSlot")]



	[PrimaryKey("id")]




	[ExplicitColumns]

    public partial class D_EddyCurrentDisplacementSlot : SlaveORM.Record<D_EddyCurrentDisplacementSlot>  
    {



		[Column] public long id { get; set; }





		[Column] public Guid T_Item_Guid { get; set; }





		[Column] public string ChannelHDID { get; set; }





		[Column] public DateTime ACQDatetime { get; set; }





		[Column] public int AlarmGrade { get; set; }





		[Column] public byte? ACQ_Unit_Type { get; set; }





		[Column] public byte? AsySyn { get; set; }





		[Column] public byte? MainCardCode { get; set; }





		[Column] public byte? SynWaveCode { get; set; }





		[Column] public bool? IsHdBypass { get; set; }





		[Column] public bool? IsHdMultiplication { get; set; }





		[Column] public Guid? RecordLab { get; set; }





		[Column] public Guid? SaveLab { get; set; }





		[Column] public Guid? ContinueLab { get; set; }





		[Column] public string ExtraInfoJSON { get; set; }





		[Column] public int? MountDegree { get; set; }





		[Column] public byte? TPDirCode { get; set; }





		[Column] public double? Result { get; set; }





		[Column] public bool? IsNotOK { get; set; }





		[Column] public bool? IsValidCH { get; set; }





		[Column] public bool? IsValidWave { get; set; }





		[Column] public string WaveUnit { get; set; }





		[Column] public string Unit { get; set; }





		[Column] public double? RPM { get; set; }





		[Column] public bool? IsMultiplication { get; set; }





		[Column] public double? MultiplicationCor { get; set; }





		[Column] public double? BiasVoltHigh { get; set; }





		[Column] public double? BiasVoltLow { get; set; }





		[Column] public byte? HighPassCode { get; set; }





		[Column] public byte? InSignalCode { get; set; }





		[Column] public bool? IsBypass { get; set; }





		[Column] public string Remarks { get; set; }





		[Column] public byte? SVTypeCode { get; set; }





		[Column] public double? SampleFre { get; set; }





		[Column] public byte? SampleModeCode { get; set; }





		[Column] public int? SamplePoint { get; set; }





		[Column] public double? Sensitivity { get; set; }





		[Column] public byte? WaveCode { get; set; }





		[Column] public string AlarmLimitJSON { get; set; }





		[Column] public DateTime? UploadDatetime { get; set; }



	}

    

	[TableName("dbo.D_EddyCurrentDisplacementSlot_DivFreInfo")]



	[PrimaryKey("id")]




	[ExplicitColumns]

    public partial class D_EddyCurrentDisplacementSlot_DivFreInfo : SlaveORM.Record<D_EddyCurrentDisplacementSlot_DivFreInfo>  
    {



		[Column] public long id { get; set; }





		[Column] public Guid T_Item_Guid { get; set; }





		[Column] public string ChannelHDID { get; set; }





		[Column] public DateTime ACQDatetime { get; set; }





		[Column] public int AlarmGrade { get; set; }





		[Column] public Guid? RecordLab { get; set; }





		[Column] public string Code { get; set; }





		[Column] public string DescriptionFre { get; set; }





		[Column] public short? DivFreCode { get; set; }





		[Column] public double? Phase { get; set; }





		[Column] public Guid? Guid { get; set; }





		[Column] public string Name { get; set; }





		[Column] public double? Result { get; set; }





		[Column] public string AlarmLimitJSON { get; set; }





		[Column] public DateTime? UploadDatetime { get; set; }



	}

    

	[TableName("dbo.D_EddyCurrentDisplacementSlot_Waveform")]



	[PrimaryKey("id")]




	[ExplicitColumns]

    public partial class D_EddyCurrentDisplacementSlot_Waveform : SlaveORM.Record<D_EddyCurrentDisplacementSlot_Waveform>  
    {



		[Column] public long id { get; set; }





		[Column] public Guid T_Item_Guid { get; set; }





		[Column] public string ChannelHDID { get; set; }





		[Column] public DateTime ACQDatetime { get; set; }





		[Column] public int AlarmGrade { get; set; }





		[Column] public Guid RecordLab { get; set; }





		[Column] public byte[] WaveData { get; set; }





		[Column] public string WaveUnit { get; set; }





		[Column] public double? SampleFre { get; set; }





		[Column] public int? SamplePoint { get; set; }



	}

    

	[TableName("dbo.D_EddyCurrentKeyPhaseSlot")]



	[PrimaryKey("id")]




	[ExplicitColumns]

    public partial class D_EddyCurrentKeyPhaseSlot : SlaveORM.Record<D_EddyCurrentKeyPhaseSlot>  
    {



		[Column] public long id { get; set; }





		[Column] public Guid T_Item_Guid { get; set; }





		[Column] public string ChannelHDID { get; set; }





		[Column] public DateTime ACQDatetime { get; set; }





		[Column] public int AlarmGrade { get; set; }





		[Column] public byte? ACQ_Unit_Type { get; set; }





		[Column] public byte? AsySyn { get; set; }





		[Column] public byte? MainCardCode { get; set; }





		[Column] public byte? SynWaveCode { get; set; }





		[Column] public bool? IsHdBypass { get; set; }





		[Column] public bool? IsHdMultiplication { get; set; }





		[Column] public Guid? RecordLab { get; set; }





		[Column] public Guid? SaveLab { get; set; }





		[Column] public Guid? ContinueLab { get; set; }





		[Column] public string ExtraInfoJSON { get; set; }





		[Column] public int? MountDegree { get; set; }





		[Column] public byte? TPDirCode { get; set; }





		[Column] public double? Result { get; set; }





		[Column] public bool? IsNotOK { get; set; }





		[Column] public bool? IsValidCH { get; set; }





		[Column] public bool? IsValidWave { get; set; }





		[Column] public double? SampleFre { get; set; }





		[Column] public string WaveUnit { get; set; }





		[Column] public string Unit { get; set; }





		[Column] public double? BiasVoltHigh { get; set; }





		[Column] public double? BiasVoltLow { get; set; }





		[Column] public byte? InSignalCode { get; set; }





		[Column] public byte? ThresholdModeCode { get; set; }





		[Column] public byte? EddyCurrentRPMCode { get; set; }





		[Column] public bool? IsBypass { get; set; }





		[Column] public bool? IsNotch { get; set; }





		[Column] public string Remarks { get; set; }





		[Column] public byte? SVTypeCode { get; set; }





		[Column] public double? Sensitivity { get; set; }





		[Column] public int? AverageNumber { get; set; }





		[Column] public double? CalibrationCor { get; set; }





		[Column] public double? HysteresisVolt { get; set; }





		[Column] public double? ThresholdVolt { get; set; }





		[Column] public double? TeethNumber { get; set; }





		[Column] public string AlarmLimitJSON { get; set; }





		[Column] public DateTime? UploadDatetime { get; set; }



	}

    

	[TableName("dbo.D_EddyCurrentKeyPhaseSlot_Waveform")]



	[PrimaryKey("id")]




	[ExplicitColumns]

    public partial class D_EddyCurrentKeyPhaseSlot_Waveform : SlaveORM.Record<D_EddyCurrentKeyPhaseSlot_Waveform>  
    {



		[Column] public long id { get; set; }





		[Column] public Guid T_Item_Guid { get; set; }





		[Column] public string ChannelHDID { get; set; }





		[Column] public DateTime ACQDatetime { get; set; }





		[Column] public int AlarmGrade { get; set; }





		[Column] public Guid RecordLab { get; set; }





		[Column] public byte[] WaveData { get; set; }





		[Column] public string WaveUnit { get; set; }





		[Column] public double? SampleFre { get; set; }





		[Column] public int? SamplePoint { get; set; }



	}

    

	[TableName("dbo.D_EddyCurrentTachometerSlot")]



	[PrimaryKey("id")]




	[ExplicitColumns]

    public partial class D_EddyCurrentTachometerSlot : SlaveORM.Record<D_EddyCurrentTachometerSlot>  
    {



		[Column] public long id { get; set; }





		[Column] public Guid T_Item_Guid { get; set; }





		[Column] public string ChannelHDID { get; set; }





		[Column] public DateTime ACQDatetime { get; set; }





		[Column] public int AlarmGrade { get; set; }





		[Column] public byte? ACQ_Unit_Type { get; set; }





		[Column] public byte? AsySyn { get; set; }





		[Column] public byte? MainCardCode { get; set; }





		[Column] public byte? SynWaveCode { get; set; }





		[Column] public bool? IsHdBypass { get; set; }





		[Column] public bool? IsHdMultiplication { get; set; }





		[Column] public Guid? RecordLab { get; set; }





		[Column] public Guid? SaveLab { get; set; }





		[Column] public Guid? ContinueLab { get; set; }





		[Column] public string ExtraInfoJSON { get; set; }





		[Column] public int? MountDegree { get; set; }





		[Column] public byte? TPDirCode { get; set; }





		[Column] public double? Result { get; set; }





		[Column] public bool? IsNotOK { get; set; }





		[Column] public bool? IsValidCH { get; set; }





		[Column] public bool? IsValidWave { get; set; }





		[Column] public double? SampleFre { get; set; }





		[Column] public string WaveUnit { get; set; }





		[Column] public string Unit { get; set; }





		[Column] public double? BiasVoltHigh { get; set; }





		[Column] public double? BiasVoltLow { get; set; }





		[Column] public byte? InSignalCode { get; set; }





		[Column] public bool? IsBypass { get; set; }





		[Column] public bool? IsNotch { get; set; }





		[Column] public bool? IsEnableMainCH { get; set; }





		[Column] public string Remarks { get; set; }





		[Column] public int? SVTypeCode { get; set; }





		[Column] public byte? RPMCouplingCode { get; set; }





		[Column] public byte? ThresholdModeCode { get; set; }





		[Column] public byte? EddyCurrentRPMCode { get; set; }





		[Column] public double? Sensitivity { get; set; }





		[Column] public int? AverageNumber { get; set; }





		[Column] public double? CalibrationCor { get; set; }





		[Column] public double? HysteresisVolt { get; set; }





		[Column] public double? TeethNumber { get; set; }





		[Column] public double? ThresholdVolt { get; set; }





		[Column] public string AlarmLimitJSON { get; set; }





		[Column] public DateTime? UploadDatetime { get; set; }



	}

    

	[TableName("dbo.D_EddyCurrentTachometerSlot_Waveform")]



	[PrimaryKey("id")]




	[ExplicitColumns]

    public partial class D_EddyCurrentTachometerSlot_Waveform : SlaveORM.Record<D_EddyCurrentTachometerSlot_Waveform>  
    {



		[Column] public long id { get; set; }





		[Column] public Guid T_Item_Guid { get; set; }





		[Column] public string ChannelHDID { get; set; }





		[Column] public DateTime ACQDatetime { get; set; }





		[Column] public int AlarmGrade { get; set; }





		[Column] public Guid RecordLab { get; set; }





		[Column] public byte[] WaveData { get; set; }





		[Column] public string WaveUnit { get; set; }





		[Column] public double? SampleFre { get; set; }





		[Column] public int? SamplePoint { get; set; }



	}

    

	[TableName("dbo.D_GlobalInfo")]



	[PrimaryKey("SlaveGlobalID", AutoIncrement=false)]


	[ExplicitColumns]

    public partial class D_GlobalInfo : SlaveORM.Record<D_GlobalInfo>  
    {



		[Column] public Guid SlaveGlobalID { get; set; }





		[Column] public DateTime? CreateTime { get; set; }



	}

    

	[TableName("dbo.D_IEPESlot")]



	[PrimaryKey("id")]




	[ExplicitColumns]

    public partial class D_IEPESlot : SlaveORM.Record<D_IEPESlot>  
    {



		[Column] public long id { get; set; }





		[Column] public Guid T_Item_Guid { get; set; }





		[Column] public string ChannelHDID { get; set; }





		[Column] public DateTime ACQDatetime { get; set; }





		[Column] public int AlarmGrade { get; set; }





		[Column] public byte? ACQ_Unit_Type { get; set; }





		[Column] public byte? AsySyn { get; set; }





		[Column] public byte? MainCardCode { get; set; }





		[Column] public byte? SynWaveCode { get; set; }





		[Column] public bool? IsHdBypass { get; set; }





		[Column] public bool? IsHdMultiplication { get; set; }





		[Column] public Guid? RecordLab { get; set; }





		[Column] public Guid? SaveLab { get; set; }





		[Column] public Guid? ContinueLab { get; set; }





		[Column] public string ExtraInfoJSON { get; set; }





		[Column] public int? MountDegree { get; set; }





		[Column] public byte? TPDirCode { get; set; }





		[Column] public double? Result { get; set; }





		[Column] public bool? IsNotOK { get; set; }





		[Column] public bool? IsValidCH { get; set; }





		[Column] public bool? IsValidWave { get; set; }





		[Column] public string WaveUnit { get; set; }





		[Column] public string Unit { get; set; }





		[Column] public double? RPM { get; set; }





		[Column] public bool? IsMultiplication { get; set; }





		[Column] public double? MultiplicationCor { get; set; }





		[Column] public double? BiasVoltHigh { get; set; }





		[Column] public double? BiasVoltLow { get; set; }





		[Column] public double? DisplacementCalibration { get; set; }





		[Column] public byte? HighPassCode { get; set; }





		[Column] public byte? InSignalCode { get; set; }





		[Column] public byte? WaveCode { get; set; }





		[Column] public byte? SVTypeCode { get; set; }





		[Column] public byte? SampleModeCode { get; set; }





		[Column] public int? Integration { get; set; }





		[Column] public bool? IsBypass { get; set; }





		[Column] public string Remarks { get; set; }





		[Column] public double? SampleFre { get; set; }





		[Column] public int? SamplePoint { get; set; }





		[Column] public double? Sensitivity { get; set; }





		[Column] public double? VelocityCalibration { get; set; }





		[Column] public string AlarmLimitJSON { get; set; }





		[Column] public DateTime? UploadDatetime { get; set; }



	}

    

	[TableName("dbo.D_IEPESlot_DivFreInfo")]



	[PrimaryKey("id")]




	[ExplicitColumns]

    public partial class D_IEPESlot_DivFreInfo : SlaveORM.Record<D_IEPESlot_DivFreInfo>  
    {



		[Column] public long id { get; set; }





		[Column] public Guid T_Item_Guid { get; set; }





		[Column] public string ChannelHDID { get; set; }





		[Column] public DateTime ACQDatetime { get; set; }





		[Column] public int AlarmGrade { get; set; }





		[Column] public Guid? RecordLab { get; set; }





		[Column] public string Code { get; set; }





		[Column] public string DescriptionFre { get; set; }





		[Column] public short? DivFreCode { get; set; }





		[Column] public double? Phase { get; set; }





		[Column] public Guid? Guid { get; set; }





		[Column] public string Name { get; set; }





		[Column] public double? Result { get; set; }





		[Column] public string AlarmLimitJSON { get; set; }





		[Column] public DateTime? UploadDatetime { get; set; }



	}

    

	[TableName("dbo.D_IEPESlot_Waveform")]



	[PrimaryKey("id")]




	[ExplicitColumns]

    public partial class D_IEPESlot_Waveform : SlaveORM.Record<D_IEPESlot_Waveform>  
    {



		[Column] public long id { get; set; }





		[Column] public Guid T_Item_Guid { get; set; }





		[Column] public string ChannelHDID { get; set; }





		[Column] public DateTime ACQDatetime { get; set; }





		[Column] public int AlarmGrade { get; set; }





		[Column] public Guid RecordLab { get; set; }





		[Column] public byte[] WaveData { get; set; }





		[Column] public string WaveUnit { get; set; }





		[Column] public double? SampleFre { get; set; }





		[Column] public int? SamplePoint { get; set; }



	}

    

	[TableName("dbo.D_RelaySlot")]



	[PrimaryKey("id")]




	[ExplicitColumns]

    public partial class D_RelaySlot : SlaveORM.Record<D_RelaySlot>  
    {



		[Column] public long id { get; set; }





		[Column] public Guid T_Item_Guid { get; set; }





		[Column] public string ChannelHDID { get; set; }





		[Column] public DateTime ACQDatetime { get; set; }





		[Column] public int AlarmGrade { get; set; }





		[Column] public byte? ACQ_Unit_Type { get; set; }





		[Column] public byte? AsySyn { get; set; }





		[Column] public byte? MainCardCode { get; set; }





		[Column] public byte? SynWaveCode { get; set; }





		[Column] public bool? IsHdBypass { get; set; }





		[Column] public bool? IsHdMultiplication { get; set; }





		[Column] public Guid? RecordLab { get; set; }





		[Column] public Guid? SaveLab { get; set; }





		[Column] public Guid? ContinueLab { get; set; }





		[Column] public string ExtraInfoJSON { get; set; }





		[Column] public double? Result { get; set; }





		[Column] public bool? IsNotOK { get; set; }





		[Column] public bool? IsValidCH { get; set; }





		[Column] public string Unit { get; set; }





		[Column] public byte? InSignalCode { get; set; }





		[Column] public bool? IsBypass { get; set; }





		[Column] public string Remarks { get; set; }





		[Column] public byte? SVTypeCode { get; set; }





		[Column] public string AlarmLimitJSON { get; set; }





		[Column] public DateTime? UploadDatetime { get; set; }



	}

    

	[TableName("dbo.D_SlotIndex")]



	[PrimaryKey("T_Item_Guid", AutoIncrement=false)]


	[ExplicitColumns]

    public partial class D_SlotIndex : SlaveORM.Record<D_SlotIndex>  
    {



		[Column] public Guid T_Item_Guid { get; set; }





		[Column] public int SignalType { get; set; }





		[Column] public string ExtraData { get; set; }





		[Column] public DateTime? CreateTime { get; set; }





		[Column] public DateTime? UpdateTime { get; set; }





		[Column] public int? Status { get; set; }



	}

    

	[TableName("dbo.D_SlotIndexHistory")]



	[PrimaryKey("T_Item_Guid", AutoIncrement=false)]


	[ExplicitColumns]

    public partial class D_SlotIndexHistory : SlaveORM.Record<D_SlotIndexHistory>  
    {



		[Column] public Guid T_Item_Guid { get; set; }





		[Column] public int SignalType { get; set; }





		[Column] public DateTime EndTime { get; set; }





		[Column] public DateTime? CreateTime { get; set; }





		[Column] public DateTime? UpdateTime { get; set; }





		[Column] public int? Status { get; set; }



	}

    

	[TableName("dbo.D_Waveform")]



	[PrimaryKey("id")]




	[ExplicitColumns]

    public partial class D_Waveform : SlaveORM.Record<D_Waveform>  
    {



		[Column] public long id { get; set; }





		[Column] public Guid T_Item_Guid { get; set; }





		[Column] public string ChannelHDID { get; set; }





		[Column] public DateTime ACQDatetime { get; set; }





		[Column] public int AlarmGrade { get; set; }





		[Column] public Guid RecordLab { get; set; }





		[Column] public byte[] WaveData { get; set; }





		[Column] public string WaveUnit { get; set; }





		[Column] public double? SampleFre { get; set; }





		[Column] public int? SamplePoint { get; set; }



	}

    

	[TableName("dbo.D_WaveGeneralSlot")]



	[PrimaryKey("id")]




	[ExplicitColumns]

    public partial class D_WaveGeneralSlot : SlaveORM.Record<D_WaveGeneralSlot>  
    {



		[Column] public long id { get; set; }



	}

    

	[TableName("dbo.D_WirelessScalarSlot")]



	[PrimaryKey("id")]




	[ExplicitColumns]

    public partial class D_WirelessScalarSlot : SlaveORM.Record<D_WirelessScalarSlot>  
    {



		[Column] public long id { get; set; }





		[Column] public Guid T_Item_Guid { get; set; }





		[Column] public string ChannelHDID { get; set; }





		[Column] public DateTime ACQDatetime { get; set; }





		[Column] public int AlarmGrade { get; set; }





		[Column] public byte? ACQ_Unit_Type { get; set; }





		[Column] public byte? AsySyn { get; set; }





		[Column] public byte? MainCardCode { get; set; }





		[Column] public byte? SynWaveCode { get; set; }





		[Column] public bool? IsHdBypass { get; set; }





		[Column] public bool? IsHdMultiplication { get; set; }





		[Column] public Guid? RecordLab { get; set; }





		[Column] public Guid? SaveLab { get; set; }





		[Column] public Guid? ContinueLab { get; set; }





		[Column] public string ExtraInfoJSON { get; set; }





		[Column] public double? Result { get; set; }





		[Column] public bool? IsNotOK { get; set; }





		[Column] public bool? IsValidCH { get; set; }





		[Column] public string Unit { get; set; }





		[Column] public string SlaveIdentifier { get; set; }





		[Column] public string MasterIdentifier { get; set; }





		[Column] public double? BatteryEnergy { get; set; }





		[Column] public byte? EquationCode { get; set; }





		[Column] public bool? IsBypass { get; set; }





		[Column] public string ReceiveCardName { get; set; }





		[Column] public string Remarks { get; set; }





		[Column] public byte? SVTypeCode { get; set; }





		[Column] public int? SleepTime { get; set; }





		[Column] public string TransmissionName { get; set; }





		[Column] public byte? TransmissionType { get; set; }





		[Column] public string Version { get; set; }





		[Column] public int? WorkTime { get; set; }





		[Column] public string AlarmLimitJSON { get; set; }





		[Column] public DateTime? UploadDatetime { get; set; }



	}

    

	[TableName("dbo.D_WirelessVibrationSlot")]



	[PrimaryKey("id")]




	[ExplicitColumns]

    public partial class D_WirelessVibrationSlot : SlaveORM.Record<D_WirelessVibrationSlot>  
    {



		[Column] public long id { get; set; }





		[Column] public Guid T_Item_Guid { get; set; }





		[Column] public string ChannelHDID { get; set; }





		[Column] public DateTime ACQDatetime { get; set; }





		[Column] public int AlarmGrade { get; set; }





		[Column] public byte? ACQ_Unit_Type { get; set; }





		[Column] public byte? AsySyn { get; set; }





		[Column] public byte? MainCardCode { get; set; }





		[Column] public byte? SynWaveCode { get; set; }





		[Column] public bool? IsHdBypass { get; set; }





		[Column] public bool? IsHdMultiplication { get; set; }





		[Column] public Guid? RecordLab { get; set; }





		[Column] public Guid? SaveLab { get; set; }





		[Column] public Guid? ContinueLab { get; set; }





		[Column] public string ExtraInfoJSON { get; set; }





		[Column] public int? MountDegree { get; set; }





		[Column] public byte? TPDirCode { get; set; }





		[Column] public double? Result { get; set; }





		[Column] public bool? IsNotOK { get; set; }





		[Column] public bool? IsValidCH { get; set; }





		[Column] public bool? IsValidWave { get; set; }





		[Column] public string WaveUnit { get; set; }





		[Column] public string Unit { get; set; }





		[Column] public double? RPM { get; set; }





		[Column] public bool? IsMultiplication { get; set; }





		[Column] public double? MultiplicationCor { get; set; }





		[Column] public double? BiasVoltHigh { get; set; }





		[Column] public double? BiasVoltLow { get; set; }





		[Column] public double? DisplacementCalibration { get; set; }





		[Column] public int? Integration { get; set; }





		[Column] public bool? IsBypass { get; set; }





		[Column] public string Remarks { get; set; }





		[Column] public byte? SVTypeCode { get; set; }





		[Column] public double? SampleFre { get; set; }





		[Column] public int? SamplePoint { get; set; }





		[Column] public double? Sensitivity { get; set; }





		[Column] public double? VelocityCalibration { get; set; }





		[Column] public string SlaveIdentifier { get; set; }





		[Column] public string MasterIdentifier { get; set; }





		[Column] public double? BatteryEnergy { get; set; }





		[Column] public string ReceiveCardName { get; set; }





		[Column] public int? SleepTime { get; set; }





		[Column] public string TransmissionName { get; set; }





		[Column] public byte? TransmissionType { get; set; }





		[Column] public string Version { get; set; }





		[Column] public int? WorkTime { get; set; }





		[Column] public string AlarmLimitJSON { get; set; }





		[Column] public DateTime? UploadDatetime { get; set; }



	}

    

	[TableName("dbo.D_WirelessVibrationSlot_DivFreInfo")]



	[PrimaryKey("id")]




	[ExplicitColumns]

    public partial class D_WirelessVibrationSlot_DivFreInfo : SlaveORM.Record<D_WirelessVibrationSlot_DivFreInfo>  
    {



		[Column] public long id { get; set; }





		[Column] public Guid T_Item_Guid { get; set; }





		[Column] public string ChannelHDID { get; set; }





		[Column] public DateTime ACQDatetime { get; set; }





		[Column] public int AlarmGrade { get; set; }





		[Column] public Guid? RecordLab { get; set; }





		[Column] public string Code { get; set; }





		[Column] public string DescriptionFre { get; set; }





		[Column] public short? DivFreCode { get; set; }





		[Column] public double? Phase { get; set; }





		[Column] public Guid? Guid { get; set; }





		[Column] public string Name { get; set; }





		[Column] public double? Result { get; set; }





		[Column] public string AlarmLimitJSON { get; set; }





		[Column] public DateTime? UploadDatetime { get; set; }



	}

    

	[TableName("dbo.D_WirelessVibrationSlot_Waveform")]



	[PrimaryKey("id")]




	[ExplicitColumns]

    public partial class D_WirelessVibrationSlot_Waveform : SlaveORM.Record<D_WirelessVibrationSlot_Waveform>  
    {



		[Column] public long id { get; set; }





		[Column] public Guid T_Item_Guid { get; set; }





		[Column] public string ChannelHDID { get; set; }





		[Column] public DateTime ACQDatetime { get; set; }





		[Column] public int AlarmGrade { get; set; }





		[Column] public Guid RecordLab { get; set; }





		[Column] public byte[] WaveData { get; set; }





		[Column] public string WaveUnit { get; set; }





		[Column] public double? SampleFre { get; set; }





		[Column] public int? SamplePoint { get; set; }



	}


}
