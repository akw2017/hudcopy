<UserControl x:Class="AIC.OnLineDataPage.Views.OnlineDataListView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:control="clr-namespace:AIC.Core.OrganizationModels;assembly=AIC.Core"  
             xmlns:Controls="http://metro.mahapps.com/winfx/xaml/controls"
             xmlns:prism="http://prismlibrary.com/"
             prism:ViewModelLocator.AutoWireViewModel="True" 
             xmlns:page="clr-namespace:Wpf.PageNavigationControl;assembly=Wpf.PageNavigationControl"
             xmlns:command="clr-namespace:AIC.Core.ExCommand;assembly=AIC.Core"
             xmlns:conveter="clr-namespace:AIC.OnLineDataPage.Converters"
             xmlns:bsFilter="http://schemas.bolapansoft.com/xaml/Controls/ItemsFilter"      
             xmlns:signal="clr-namespace:AIC.Core.SignalModels;assembly=AIC.Core"
             xmlns:core="clr-namespace:AIC.Core;assembly=AIC.Core"
             xmlns:coreType="clr-namespace:AIC.CoreType;assembly=AIC.CoreType"
             xmlns:view="clr-namespace:AIC.OnLineDataPage.Views"
             mc:Ignorable="d"
             d:DesignHeight="300" d:DesignWidth="600">
    <Control.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/AIC.Resources;component/Themes/ScrollBar.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <conveter:IntToAlarmTypeStrConverter x:Key="intToAlarmTypeStrConverter"/>
            <conveter:EqualBindingConverter x:Key="equalBindingConverter"/>
            <core:GradeToStringConverter x:Key="gradeToStringConverter"/>
            <core:AlarmLimitToStringConverter x:Key="alarmLimitToStringConverter"/>
            <core:TypeOfConverter x:Key="typeOfConverter"/>
            <core:IsDivfreConverter x:Key="isDivfreConverter"/>
            <core:VisibilityToBoolConverter x:Key="visibilityToBoolConverter" />
            <core:BoolToVisibilityConverter x:Key="boolToVisibilityConverter" />
            <core:EnumDescriptionConverter x:Key="enumDescriptionConverter"/>
            <Style x:Key="expandToggleStyle" TargetType="ToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
                <Setter Property="Cursor" Value="Hand" />
                <Setter Property="Foreground" Value="{DynamicResource DarkAccentColorBrush}" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ToggleButton">
                            <Grid>
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CommonStates">
                                        <VisualStateGroup.Transitions>
                                            <VisualTransition GeneratedDuration="0:0:0.1" />
                                        </VisualStateGroup.Transitions>
                                        <VisualState x:Name="Normal" />
                                        <VisualState x:Name="MouseOver">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="normal" d:IsOptimized="True" />
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Pressed">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="normal" d:IsOptimized="True" />
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Disabled">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" To="0.3" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="normal" d:IsOptimized="True" />
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                    <VisualStateGroup x:Name="CheckStates">
                                        <VisualState x:Name="Checked">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.3" To="180" Storyboard.TargetProperty="Angle" Storyboard.TargetName="symbolRotation" d:IsOptimized="True" />
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Unchecked">
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.3" To="90" Storyboard.TargetProperty="Angle" Storyboard.TargetName="symbolRotation" d:IsOptimized="True" />
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Indeterminate" />
                                    </VisualStateGroup>
                                    <VisualStateGroup x:Name="FocusStates">
                                        <VisualState x:Name="Focused" />
                                        <VisualState x:Name="Unfocused" />
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Border Grid.Row="2" Grid.ColumnSpan="3"  Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                                <Path x:Name="normal" HorizontalAlignment="Center" Width="10" Stretch="Fill" Opacity="0.6" Data="M1,6 C1,6 1,11 1,11 C1,11 7.5,6.3583374 7.5,6.3583374 C7.5,6.3583374 14,11 14,11 C14,11 14,6 14,6 C14,6 7.5,1.3583374 7.5,1.3583374 C7.5,1.3583374 1,6 1,6 z" Fill="{TemplateBinding Foreground}" UseLayoutRounding="False" VerticalAlignment="Center" Height="7" RenderTransformOrigin="0.5,0.5">
                                    <Path.RenderTransform>
                                        <!--<CompositeTransform Rotation="180"/>-->
                                        <TransformGroup>
                                            <ScaleTransform />
                                            <SkewTransform />
                                            <RotateTransform x:Name="symbolRotation" Angle="90" />
                                            <TranslateTransform />
                                        </TransformGroup>
                                    </Path.RenderTransform>
                                </Path>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="VerticalAlignment" Value="Top"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <DataTemplate  x:Key="HeiachyTemplate">
                <DataGrid ItemsSource="{Binding DivFres}" Margin="0" Background="Transparent" BorderThickness="0" BorderBrush="{x:Null}" IsReadOnly="True" AutoGenerateColumns="False" GridLinesVisibility="None" 
                          RowHeaderWidth="0" >
                    <DataGrid.Columns>
                        <DataGridTemplateColumn Header="报警级别" SortMemberPath="DelayAlarmGrade" IsReadOnly="True">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Ellipse x:Name="ellipse" Fill="#FF85CBEB" HorizontalAlignment="Center" Height="12" Margin="0" Width="12" VerticalAlignment="Center"/>
                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding Path=DelayAlarmGrade}" Value="Invalid">
                                            <Setter TargetName="ellipse" Property="Fill" Value="Pink"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Path=DelayAlarmGrade}" Value="HighAlarm">
                                            <Setter TargetName="ellipse" Property="Fill" Value="DarkOrange"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Path=DelayAlarmGrade}" Value="LowAlarm">
                                            <Setter TargetName="ellipse" Property="Fill" Value="DarkOrange" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Path=DelayAlarmGrade}" Value="HighDanger">
                                            <Setter TargetName="ellipse" Property="Fill" Value="Red"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Path=DelayAlarmGrade}" Value="LowDanger">
                                            <Setter TargetName="ellipse" Property="Fill" Value="Red" />
                                        </DataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <DataGridTextColumn Header="分频名称" Binding="{Binding DisPlayName}" IsReadOnly="True"/>
                        <!--<DataGridTextColumn Header="分频类型"  Binding="{Binding DivFreType, Converter={StaticResource ResourceKey=enumDescriptionConverter}}" IsReadOnly="True"/>
                        <DataGridTextColumn Header="报警类型"  Binding="{Binding AlarmType, Converter={StaticResource intToAlarmTypeStrConverter}}" IsReadOnly="True"/>-->
                        <DataGridTextColumn Header="采集时间"  Binding="{Binding ACQDatetime, StringFormat=yyyy-MM-dd HH:mm:ss}" IsReadOnly="True"/>
                        <DataGridTextColumn Header="频率"  Binding="{Binding FreV,StringFormat=F3}" IsReadOnly="True"/>
                        <DataGridTextColumn Header="幅值"  Binding="{Binding FreMV,StringFormat=F3}" IsReadOnly="True"/>
                        <DataGridTextColumn Header="相位"  Binding="{Binding Phase,StringFormat=F1}" IsReadOnly="True"/>
                        <DataGridTextColumn Header="高危"  Binding="{Binding HighDanger,StringFormat=F3}" IsReadOnly="True"/>
                        <DataGridTextColumn Header="高警"  Binding="{Binding HighAlarm,StringFormat=F3}" IsReadOnly="True"/>
                        <DataGridTextColumn Header="正常(高)"  Binding="{Binding HighNormal,StringFormat=F3}" IsReadOnly="True"/>
                        <DataGridTextColumn Header="正常(低)"  Binding="{Binding LowNormal,StringFormat=F3}" IsReadOnly="True"/>
                        <DataGridTextColumn Header="低警"  Binding="{Binding LowAlarm,StringFormat=F3}" IsReadOnly="True"/>
                        <DataGridTextColumn Header="低危"  Binding="{Binding LowDanger,StringFormat=F3}" IsReadOnly="True"/>
                        <DataGridTextColumn Header="转速"  Binding="{Binding RPM,StringFormat=F1}" IsReadOnly="True"/>
                        <DataGridTextColumn Header="默认转速"  Binding="{Binding DefaultR}" IsReadOnly="True"/>

                        <DataGridTextColumn Header="基础频率1"  Binding="{Binding Base1Fre}" IsReadOnly="True" />
                        <DataGridTextColumn Header="基础频率2"  Binding="{Binding Base2Fre}" IsReadOnly="True"/>
                        <DataGridTextColumn Header="最大频率数" Binding="{Binding MaxFreNum,StringFormat=F3}" IsReadOnly="True"/>

                        <DataGridTextColumn Header="倍频"  Binding="{Binding MultiFre}" IsReadOnly="True"/>
                        <DataGridTextColumn Header="特征频率"  Binding="{Binding CharacteristicFre}" IsReadOnly="True"/>

                        <DataGridTextColumn Header="浮动百分比"  Binding="{Binding Base1FrePercent, StringFormat=F3}" IsReadOnly="True"/>
                    </DataGrid.Columns>
                </DataGrid>
            </DataTemplate>
            <DataTemplate x:Key="enumComboItemTemplate">
                <TextBlock Text="{Binding Path=., Converter={StaticResource ResourceKey=enumDescriptionConverter}}" />
            </DataTemplate>   
        </ResourceDictionary>
    </Control.Resources>
    <Grid Name="grdWorkbench">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="3*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>     
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <TreeView Grid.Row="0" Grid.RowSpan="3" x:Name="treeview"                        
                        ItemsSource="{Binding OrganizationTreeItems}" 
                        Style="{DynamicResource VirtualisedMetroTreeView}" >
            <TreeView.Resources>
                <HierarchicalDataTemplate DataType="{x:Type control:OrganizationTreeItemViewModel}" ItemsSource="{Binding Path=Children}" >
                    <StackPanel Orientation="Horizontal">
                        <Path x:Name="IconPath" Width="18" Height="18" Stretch="Fill" Fill="{DynamicResource AccentColorBrush}" Data="F1 M 24.0033,56.0078L 24.0033,38.0053L 22.0031,40.0056L 19.0027,35.0049L 38.0053,20.0028L 45.0063,25.5299L 45.0063,21.753L 49.0068,21.0029L 49.0068,28.6882L 57.008,35.0049L 54.0075,40.0056L 52.0073,38.0053L 52.0073,56.0078L 24.0033,56.0078 Z M 38.0053,26.9204L 27.0038,36.005L 27.0038,53.0074L 33.0046,53.0074L 33.0046,42.006L 43.006,42.006L 43.006,53.0074L 49.0068,53.0074L 49.0068,36.005L 38.0053,26.9204 Z "/>
                        <Grid Margin="2,0,2,0">
                            <TextBlock x:Name="txtName" Text="{Binding Name, Mode=TwoWay}" Width="Auto"/>
                        </Grid>
                        <!--<CheckBox x:Name="IconFind" VerticalAlignment="Center" Height="24" Width="24" BorderThickness="0" Visibility="Collapsed" Style="{DynamicResource CheckBoxPopupStyle}">
                            --><!--<Path Width="18" Height="18" Stretch="Fill" Fill="{DynamicResource AccentColorBrush}"  Data="F1 M 14.8076,31.1139L 20.0677,25.9957C 19.3886,24.8199 19.25,23.4554 19.25,22C 19.25,17.5817 22.5817,14 27,14C 31.4183,14 35,17.5817 35,22C 35,26.4183 31.4183,29.75 27,29.75C 25.6193,29.75 24.3204,29.6502 23.1868,29.0345L 17.8861,34.1924C 17.105,34.9734 15.5887,34.9734 14.8076,34.1924C 14.0266,33.4113 14.0266,31.895 14.8076,31.1139 Z M 27,17C 24.2386,17 22,19.2386 22,22C 22,24.7614 24.2386,27 27,27C 29.7614,27 32,24.7614 32,22C 32,19.2386 29.7614,17 27,17 Z " />--><!--
                        </CheckBox>-->                       
                    </StackPanel>
                    <HierarchicalDataTemplate.Triggers>
                        <DataTrigger Binding="{Binding T_Organization.Level}" Value="0">
                            <Setter TargetName="IconPath" Property="Data" Value="F1 M 28.5,20.5833L 47.5,20.5833L 47.5,23.75L 28.5,23.75L 28.5,20.5833 Z M 49.0833,31.6667L 64.9166,31.6667L 64.9166,34.8334L 49.0833,34.8334L 49.0833,31.6667 Z M 28.5,25.3334L 34.8333,25.3334L 41.1666,25.3334L 47.5,25.3334L 47.5,52.25L 41.1666,52.25L 41.1666,42.75L 34.8333,42.75L 34.8333,52.25L 28.5,52.25L 28.5,25.3334 Z M 49.0833,52.25L 49.0833,36.4167L 53.8333,36.4167L 60.1666,36.4167L 64.9166,36.4167L 64.9166,52.25L 60.1666,52.25L 60.1666,44.3333L 53.8333,44.3333L 53.8333,52.25L 49.0833,52.25 Z M 11.0833,52.25L 11.0833,44.3333L 11.0833,41.1667L 19.7917,34.8334L 26.9167,41.1667L 26.9167,44.3333L 26.9167,52.25L 22.1667,52.25L 22.1667,44.3333L 15.8333,44.3333L 15.8333,52.25L 11.0833,52.25 Z M 19.7916,29.6875L 26.9166,36.0209L 26.9166,39.1875L 19.7916,32.8542L 9.49999,40.375L 9.49999,37.2084L 19.7916,29.6875 Z "/>
                            <Setter TargetName="IconPath" Property="Width" Value="24"/>
                            <!--<Setter TargetName="IconFind" Property="Visibility" Value="Visible"/>-->
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Alarm}" Value="Invalid">
                            <Setter TargetName="txtName" Property="Foreground" Value="Pink"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Alarm}" Value="HighPreAlarm">
                            <Setter TargetName="txtName" Property="Foreground" Value="Yellow" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Alarm}" Value="LowPreAlarm">
                            <Setter TargetName="txtName" Property="Foreground" Value="Yellow" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Alarm}" Value="HighAlarm">
                            <Setter TargetName="txtName" Property="Foreground" Value="DarkOrange"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Alarm}" Value="LowAlarm">
                            <Setter TargetName="txtName" Property="Foreground" Value="DarkOrange" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Alarm}" Value="HighDanger">
                            <Setter TargetName="txtName" Property="Foreground" Value="Red"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Alarm}" Value="LowDanger">
                            <Setter TargetName="txtName" Property="Foreground" Value="Red" />
                        </DataTrigger>
                    </HierarchicalDataTemplate.Triggers>
                </HierarchicalDataTemplate>
                <HierarchicalDataTemplate DataType="{x:Type control:DeviceTreeItemViewModel}" >
                    <StackPanel Orientation="Horizontal">
                        <Path Width="18" Height="18" Stretch="Fill" Fill="{DynamicResource AccentColorBrush}" Data="F1 M 24.69,17.5542L 27.9094,14.793C 28.5138,15.05 29.0876,15.3647 29.6241,15.7302L 29.0458,19.93L 33.2747,20.2541C 33.5166,20.8524 33.7023,21.4794 33.8252,22.1286L 30.4458,24.69L 33.207,27.9094C 32.95,28.5137 32.6353,29.0876 32.2698,29.6241L 28.07,29.0458L 27.7459,33.2747C 27.1476,33.5166 26.5206,33.7023 25.8714,33.8252L 23.3099,30.4458L 20.0906,33.207C 19.4862,32.95 18.9124,32.6353 18.3759,32.2698L 18.9542,28.0699L 14.7253,27.7459C 14.4834,27.1476 14.2977,26.5206 14.1748,25.8713L 17.5542,23.3099L 14.793,20.0906C 15.05,19.4862 15.3647,18.9124 15.7302,18.3759L 19.93,18.9542L 20.2541,14.7252C 20.8524,14.4834 21.4794,14.2977 22.1286,14.1748L 24.69,17.5542 Z M 24,20C 21.7909,20 20,21.7909 20,24C 20,26.2091 21.7909,28 24,28C 26.2091,28 28,26.2091 28,24C 28,21.7909 26.2091,20 24,20 Z " />
                        <StackPanel Margin="2,0,2,0" Orientation="Horizontal">
                            <TextBlock x:Name="txtName" Text="{Binding Name, Mode=TwoWay}" Width="Auto" />
                            <TextBlock x:Name="txtRun" Foreground="LawnGreen" Text=":运行"/>
                            <TextBlock x:Name="txtStop" Foreground="Red" Text=":停止" Visibility="Collapsed"/>
                        </StackPanel>
                    </StackPanel>
                    <HierarchicalDataTemplate.Triggers>
                        <DataTrigger Binding="{Binding Alarm}" Value="Invalid">
                            <Setter TargetName="txtName" Property="Foreground" Value="Pink"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsRunning}" Value="false">
                            <Setter TargetName="txtRun" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="txtStop" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Alarm}" Value="HighPreAlarm">
                            <Setter TargetName="txtName" Property="Foreground" Value="Yellow" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Alarm}" Value="LowPreAlarm">
                            <Setter TargetName="txtName" Property="Foreground" Value="Yellow" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Alarm}" Value="HighAlarm">
                            <Setter TargetName="txtName" Property="Foreground" Value="DarkOrange"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Alarm}" Value="LowAlarm">
                            <Setter TargetName="txtName" Property="Foreground" Value="DarkOrange" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Alarm}" Value="HighDanger">
                            <Setter TargetName="txtName" Property="Foreground" Value="Red"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Alarm}" Value="LowDanger">
                            <Setter TargetName="txtName" Property="Foreground" Value="Red" />
                        </DataTrigger>
                    </HierarchicalDataTemplate.Triggers>
                </HierarchicalDataTemplate>                
            </TreeView.Resources>

            <TreeView.ItemContainerStyle>
                <Style TargetType="TreeViewItem" BasedOn="{StaticResource LineTreeViewItem}">
                    <Setter Property="IsSelected" Value="{Binding IsSelected,Mode=OneTime}" />
                    <Setter Property="IsExpanded" Value="{Binding IsExpanded,Mode=OneTime}" />
                </Style>
            </TreeView.ItemContainerStyle>

            <i:Interaction.Triggers>
                <i:EventTrigger EventName="SelectedItemChanged">
                    <i:InvokeCommandAction Command="{Binding SelectedTreeChangedComamnd}" CommandParameter="{Binding SelectedItem, ElementName=treeview}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

        </TreeView>

        <GridSplitter x:Name="gsSplitterr" Grid.Row="0" Grid.RowSpan="3" Grid.Column="1" Width="3" Background="{DynamicResource AccentColorBrush}" HorizontalAlignment="Center" VerticalAlignment="Stretch" Style="{StaticResource GridSplitterStyleExpend}"/>
      
        <Border Grid.Row="0" Grid.Column="2" Padding="5" Background="{DynamicResource AccentColorBrush2}">
            <Grid>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="报警级别:" VerticalAlignment="Center" Margin="2,0,2,0"/>
                    <StackPanel Margin="5,2,5,2" Orientation="Horizontal">
                        <Ellipse Fill="Pink" VerticalAlignment="Center" Height="24" Width="24"/>
                        <TextBlock Text="无效" VerticalAlignment="Center" />
                        <TextBlock Text="{Binding AbnormalCount}" VerticalAlignment="Center" Margin="2,0,0,0"/>
                        <CheckBox VerticalAlignment="Center" IsChecked="{Binding IsInvalidSignal, Mode=TwoWay}" Style="{StaticResource CheckBoxStyle}"/>
                    </StackPanel>
                    <StackPanel Margin="5,2,5,2" Orientation="Horizontal">
                        <Ellipse Fill="{DynamicResource TextBrush}" VerticalAlignment="Center" Height="24" Width="24"/>
                        <TextBlock Text="正常" VerticalAlignment="Center" />
                        <TextBlock Text="{Binding NormalCount}" VerticalAlignment="Center" Margin="2,0,0,0"/>
                        <CheckBox VerticalAlignment="Center" IsChecked="{Binding IsNormalSignal, Mode=TwoWay}" Style="{StaticResource CheckBoxStyle}"/>
                    </StackPanel>
                    <StackPanel Margin="5,2,5,2" Orientation="Horizontal">
                        <Ellipse Fill="Yellow" VerticalAlignment="Center" Height="24" Width="24"/>
                        <TextBlock Text="预警" VerticalAlignment="Center" />
                        <TextBlock Text="{Binding PreAlertCount}" VerticalAlignment="Center" Margin="2,0,0,0"/>
                        <CheckBox VerticalAlignment="Center" IsChecked="{Binding IsPreAlarmSignal, Mode=TwoWay}" Style="{StaticResource CheckBoxStyle}"/>
                    </StackPanel>
                    <StackPanel Margin="5,2,5,2" Orientation="Horizontal">
                        <Ellipse Fill="DarkOrange" VerticalAlignment="Center" Height="24" Width="24"/>
                        <TextBlock Text="警告" VerticalAlignment="Center" />
                        <TextBlock Text="{Binding AlertCount}" VerticalAlignment="Center" Margin="2,0,0,0"/>
                        <CheckBox VerticalAlignment="Center" IsChecked="{Binding IsAlarmSignal, Mode=TwoWay}" Style="{StaticResource CheckBoxStyle}"/>
                    </StackPanel>
                    <StackPanel Margin="5,2,5,2" Orientation="Horizontal">
                        <Ellipse Fill="Red" VerticalAlignment="Center" Height="24" Width="24"/>
                        <TextBlock Text="危险" VerticalAlignment="Center" />
                        <TextBlock Text="{Binding DangerCount}" VerticalAlignment="Center" Margin="2,0,0,0"/>
                        <CheckBox VerticalAlignment="Center" IsChecked="{Binding IsDangerSignal, Mode=TwoWay}" Style="{StaticResource CheckBoxStyle}"/>
                    </StackPanel>
                    <StackPanel Margin="5,2,5,2" Orientation="Horizontal">
                        <Ellipse Fill="DarkRed" VerticalAlignment="Center" Height="24" Width="24"/>
                        <TextBlock Text="断线" VerticalAlignment="Center" />
                        <TextBlock Text="{Binding UnConnectCount}" VerticalAlignment="Center" Margin="2,0,0,0"/>
                        <CheckBox VerticalAlignment="Center" IsChecked="{Binding DisConnectSignal, Mode=TwoWay}" Style="{StaticResource CheckBoxStyle}"/>
                    </StackPanel>
                </StackPanel>

                <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" >
                    <CheckBox VerticalAlignment="Center" IsChecked="True" Content="分组显示"  Style="{StaticResource CheckBoxStyle}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Checked">
                                <i:InvokeCommandAction Command="{Binding GroupViewCommand}"/>
                            </i:EventTrigger>
                            <i:EventTrigger EventName="Unchecked">
                                <i:InvokeCommandAction Command="{Binding UnGroupViewCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </CheckBox>
                </StackPanel>
            </Grid>
        </Border>
      
        <DataGrid x:Name="gridview" Grid.Row="1" Grid.Column="2" ItemsSource="{Binding SignalsView}" SelectedItem="{Binding SelectedSignal}" Margin="0,1,0,0"      
                                   VirtualizingStackPanel.IsVirtualizing="True" VirtualizingStackPanel.VirtualizationMode="Recycling" VirtualizingStackPanel.IsVirtualizingWhenGrouping="True" ScrollViewer.CanContentScroll="True" GridLinesVisibility="None" EnableRowVirtualization="True" AutoGenerateColumns="False" CanUserAddRows="False">
            <DataGrid.Resources>
                <ControlTemplate TargetType="{x:Type GroupItem}" x:Key="defaultGroup">
                    <ItemsPresenter />
                </ControlTemplate>
            </DataGrid.Resources>
            <DataGrid.Columns>
                <!--<DataGridTextColumn Header="组织机构"  Binding="{Binding OrganizationName}" IsReadOnly="True" />-->
                <!--<DataGridTextColumn Header="设备名称"  Binding="{Binding DeviceName}" MinWidth="180" IsReadOnly="True"/>-->
                <DataGridTextColumn Header="报警级别" Binding="{Binding DelayAlarmGrade,Converter={StaticResource gradeToStringConverter}}" IsReadOnly="True"/>
                <DataGridTextColumn Header="测点名称"  Binding="{Binding ItemName}" IsReadOnly="True"/>
                <DataGridTextColumn Header="采集时间"  Binding="{Binding ACQDatetime, StringFormat=yyyy-MM-dd HH:mm:ss}" IsReadOnly="True"/>
                <DataGridTextColumn Header="数值"  Binding="{Binding Result,StringFormat=F3}" IsReadOnly="True"/>
                <DataGridTextColumn Header="单位"  Binding="{Binding Unit}" IsReadOnly="True"/>
                <DataGridTextColumn Header="传感器地址"  Binding="{Binding ChannelHDID}" IsReadOnly="True"/>
                <DataGridTextColumn Header="报警信息"  Binding="{Binding AlarmLimitString}" IsReadOnly="True"/>
                <!--<DataGridTemplateColumn Header="报警信息" IsReadOnly="True">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <ListBox x:Name="txtName" ItemsSource="{Binding AlarmLimit}">
                                <ListBox.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Horizontal"/>
                                    </ItemsPanelTemplate>
                                </ListBox.ItemsPanel>  
                                <ListBox.ItemTemplate>
                                    <DataTemplate>
                                        <StackPanel Orientation="Horizontal">
                                            <TextBlock x:Name="txtName" VerticalAlignment="Center">
                                                <TextBlock.Text>
                                                    <MultiBinding StringFormat="{}{0}:{1:F1}">
                                                        <Binding Path="Name"/>
                                                        <Binding Path="Limit"/>
                                                    </MultiBinding>
                                                </TextBlock.Text>
                                            </TextBlock>
                                        </StackPanel>
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                            </ListBox>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>-->
                <DataGridTemplateColumn Header="传感器电量">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Grid>
                                <ProgressBar x:Name="ProgressBar" Value="{Binding BatteryEnergy}" Foreground="Green" Height="20" Width="40" Margin="5 2" />
                                <TextBlock Text="{Binding BatteryEnergy, StringFormat=F0}" TextAlignment="Center" Foreground="White" VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="16"/>
                            </Grid>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
            <!--<DataGrid.RowDetailsTemplate>
                <DataTemplate>
                    <Border BorderBrush="{DynamicResource AccentColorBrush2}" BorderThickness="2" CornerRadius="2" Margin="2">
                        <DataGrid ItemsSource="{Binding DivFres}" AutoGenerateColumns="False" FrozenColumnCount="1" IsReadOnly="True">
                            <DataGrid.Columns>
                                <DataGridTemplateColumn Header="报警级别" SortMemberPath="DelayAlarmGrade" IsReadOnly="True">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <Ellipse x:Name="ellipse" Fill="#FF85CBEB" HorizontalAlignment="Center" Height="12" Margin="0" Width="12" VerticalAlignment="Center"/>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding Path=DelayAlarmGrade}" Value="Invalid">
                                                    <Setter TargetName="ellipse" Property="Fill" Value="Pink"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Path=DelayAlarmGrade}" Value="HighAlarm">
                                                    <Setter TargetName="ellipse" Property="Fill" Value="DarkOrange"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Path=DelayAlarmGrade}" Value="LowAlarm">
                                                    <Setter TargetName="ellipse" Property="Fill" Value="DarkOrange" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Path=DelayAlarmGrade}" Value="HighDanger">
                                                    <Setter TargetName="ellipse" Property="Fill" Value="Red"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Path=DelayAlarmGrade}" Value="LowDanger">
                                                    <Setter TargetName="ellipse" Property="Fill" Value="Red" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <DataGridTextColumn Header="分频名称" Binding="{Binding DisPlayName}" IsReadOnly="True"/>
                                -->
            <!--<DataGridTextColumn Header="分频类型"  Binding="{Binding DivFreType, Converter={StaticResource ResourceKey=enumDescriptionConverter}}" IsReadOnly="True"/>
                        <DataGridTextColumn Header="报警类型"  Binding="{Binding AlarmType, Converter={StaticResource intToAlarmTypeStrConverter}}" IsReadOnly="True"/>-->
            <!--
                                <DataGridTextColumn Header="采集时间"  Binding="{Binding ACQDatetime, StringFormat=yyyy-MM-dd HH:mm:ss}" MinWidth="200" IsReadOnly="True"/>
                                <DataGridTextColumn Header="频率"  Binding="{Binding FreV,StringFormat=F3}" IsReadOnly="True"/>
                                <DataGridTextColumn Header="幅值"  Binding="{Binding FreMV,StringFormat=F3}" IsReadOnly="True"/>
                                <DataGridTextColumn Header="相位"  Binding="{Binding Phase,StringFormat=F1}" IsReadOnly="True"/>
                                <DataGridTextColumn Header="高危"  Binding="{Binding HighDanger,StringFormat=F3}" IsReadOnly="True"/>
                                <DataGridTextColumn Header="高警"  Binding="{Binding HighAlarm,StringFormat=F3}" IsReadOnly="True"/>
                                <DataGridTextColumn Header="正常(高)"  Binding="{Binding HighNormal,StringFormat=F3}" IsReadOnly="True"/>
                                <DataGridTextColumn Header="正常(低)"  Binding="{Binding LowNormal,StringFormat=F3}" IsReadOnly="True"/>
                                <DataGridTextColumn Header="低警"  Binding="{Binding LowAlarm,StringFormat=F3}" IsReadOnly="True"/>
                                <DataGridTextColumn Header="低危"  Binding="{Binding LowDanger,StringFormat=F3}" IsReadOnly="True"/>
                                <DataGridTextColumn Header="转速"  Binding="{Binding RPM,StringFormat=F1}" IsReadOnly="True"/>
                                <DataGridTextColumn Header="默认转速"  Binding="{Binding DefaultR}" IsReadOnly="True"/>

                                <DataGridTextColumn Header="基础频率1"  Binding="{Binding Base1Fre}" IsReadOnly="True" />
                                <DataGridTextColumn Header="基础频率2"  Binding="{Binding Base2Fre}" IsReadOnly="True"/>
                                <DataGridTextColumn Header="最大频率数" Binding="{Binding MaxFreNum,StringFormat=F3}" IsReadOnly="True"/>

                                <DataGridTextColumn Header="倍频"  Binding="{Binding MultiFre}" IsReadOnly="True"/>
                                <DataGridTextColumn Header="特征频率"  Binding="{Binding CharacteristicFre}" IsReadOnly="True"/>

                                <DataGridTextColumn Header="浮动百分比"  Binding="{Binding Base1FrePercent, StringFormat=F3}" IsReadOnly="True"/>
                            </DataGrid.Columns>
                        </DataGrid>
                    </Border>
                </DataTemplate>
            </DataGrid.RowDetailsTemplate>-->
            <!--<DataGrid.RowHeaderTemplate>
                <DataTemplate>
                    <Grid Width="25">
                        <ToggleButton Style="{StaticResource expandToggleStyle}" x:Name="detialsBtn" Visibility="Collapsed" Width="18" Height="18"
                                              IsChecked="{Binding Converter={StaticResource visibilityToBoolConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}},Path=DetailsVisibility, Mode=TwoWay}" >
                        </ToggleButton>
                    </Grid>
                    <DataTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}},Path=DataContext,Converter={StaticResource isDivfreConverter}}" Value="true"/>
                                <Condition Binding="{core:ComparisonBinding DataContext.DivFres.Count, GT, 0,RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" Value="{x:Null}" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="detialsBtn" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </DataGrid.RowHeaderTemplate>-->
            <DataGrid.GroupStyle>
                <GroupStyle>
                    <GroupStyle.ContainerStyle>
                        <Style TargetType="{x:Type GroupItem}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type GroupItem}">
                                        <Expander BorderThickness="0,0,0,0">
                                            <Expander.Header>
                                                <StackPanel Orientation="Horizontal" Width="Auto" Height="24">
                                                    <TextBlock FontWeight="Bold" Text="{Binding Path=Name}" Margin="5,0,5,0"/>
                                                    <TextBlock FontWeight="Bold" Text=":"/>
                                                    <TextBlock FontWeight="Bold" Text="{Binding Path=ItemCount}" Margin="5,0,5,0"/>
                                                </StackPanel>
                                            </Expander.Header>
                                            <Expander.Content>
                                                <Border BorderBrush="{DynamicResource AccentColorBrush2}" BorderThickness="2">
                                                    <ItemsPresenter/>
                                                </Border>
                                            </Expander.Content>
                                            <Expander.Style>
                                                <Style TargetType="{x:Type Expander}">
                                                    <Setter Property="IsExpanded" Value="False"/>
                                                    <Style.Triggers>
                                                        <DataTrigger Value="True">
                                                            <DataTrigger.Binding>
                                                                <MultiBinding Converter="{StaticResource equalBindingConverter}">
                                                                    <Binding Path="Name"/>
                                                                    <Binding Path="DataContext.FirstName" RelativeSource="{RelativeSource Mode=FindAncestor,AncestorType=UserControl}" />
                                                                </MultiBinding>
                                                            </DataTrigger.Binding>
                                                            <Setter Property="IsExpanded" Value="True"/>
                                                        </DataTrigger>

                                                    </Style.Triggers>
                                                </Style>
                                            </Expander.Style>
                                        </Expander>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=Name}" Value="">
                                    <Setter Property="Template" Value="{StaticResource defaultGroup}" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </GroupStyle.ContainerStyle>
                    <GroupStyle.Panel>
                        <ItemsPanelTemplate>
                            <DataGridRowsPresenter/>
                        </ItemsPanelTemplate>
                    </GroupStyle.Panel>
                </GroupStyle>
            </DataGrid.GroupStyle>
            <DataGrid.ColumnHeaderStyle>
                <Style BasedOn="{StaticResource MetroDataGridColumnHeader}" TargetType="DataGridColumnHeader" >
                    <Setter Property="Background" Value="{DynamicResource AccentColorBrush3}"/>
                </Style>
            </DataGrid.ColumnHeaderStyle>

            <DataGrid.CellStyle>
                <Style BasedOn="{StaticResource MetroDataGridCell}"
                       TargetType="{x:Type DataGridCell}">
                    <Setter Property="Margin" Value="0,0,20,0"/>
                </Style>
            </DataGrid.CellStyle>
            <DataGrid.RowStyle>
                <Style BasedOn="{StaticResource MetroDataGridRow}"
                       TargetType="{x:Type DataGridRow}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Path=DelayAlarmGrade}" Value="Invalid">
                            <Setter  Property="Foreground" Value="Pink"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=DelayAlarmGrade}" Value="HighPreAlarm">
                            <Setter Property="Foreground" Value="Yellow"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=DelayAlarmGrade}" Value="LowPreAlarm">
                            <Setter Property="Foreground" Value="Yellow"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=DelayAlarmGrade}" Value="HighAlarm">
                            <Setter Property="Foreground" Value="DarkOrange"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=DelayAlarmGrade}" Value="LowAlarm">
                            <Setter Property="Foreground" Value="DarkOrange" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=DelayAlarmGrade}" Value="HighDanger">
                            <Setter Property="Foreground" Value="Red"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=DelayAlarmGrade}" Value="LowDanger">
                            <Setter Property="Foreground" Value="Red" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=DelayAlarmGrade}" Value="DisConnect">
                            <Setter Property="Foreground" Value="DarkRed"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.RowStyle>
            <DataGrid.Style>
                <Style BasedOn="{StaticResource MetroDataGrid}"
                       TargetType="{x:Type DataGrid}">
                    <Setter Property="AlternatingRowBackground"
                            Value="{DynamicResource AccentColorBrush4}" />
                </Style>
            </DataGrid.Style>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="SelectionChanged">
                    <i:InvokeCommandAction Command="{Binding SelectedDataGridChangedComamnd}" CommandParameter="{Binding SelectedItem, ElementName=gridview}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
        </DataGrid>

        <Grid Grid.Row="2" Grid.Column="2">
            <Expander Header="{Binding DiagnosticInfo}" Content="{Binding DiagnosticAdvice}"></Expander>
        </Grid>       
    </Grid>
</UserControl>
